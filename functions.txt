FUNCTION IDEAS CONTRIBUTED BY SOREN
===================================

parseMakefile()
  This function reads in a Makefile and stores its dependency chain and any
  other information that we may use for building the level and stores it in some
  sort of internal representation.

mainMenu()
  This function draws the main menu and, depending on the user's selection, can
  start the Makefile parser and game screen, customization screen, or quit
  screen.

Quitting
--------

quitTest()
  This function initiates the quitting procedure, which is used to determine
  the user's fitness for leaving the game. This function performs the following
  tasks:
    - Draw the quit screen.
    - Activate quitButtonMove(), the first test.
    - Activate quitDateTest(), the second test.
    - Run terminate(), which quits the program.
  If the user cancels during either of the tests, return to the main menu rather
  than quitting.

quitButtonMove()
  This function moves the quit button across the quit screen on a timer, to make
  it harder for the user to quit the game. If the quit button reaches the edge
  of the screen, turn around and send it back in the opposite direction. If the
  user clicks on the quit button, return back to quitTest.

quitDateTest()
  This function makes the user input the correct day that the provided date
  falls on in order to continue quitting the program. It runs randomDate() to
  find a date (returning some sort of date object, probably), then asks the user
  for the answer, then runs getDay() to determine if the entry is correct and
  the user can be allowed to continue the quit procedure.

randomDate()
  This function picks a random date from eligible ones (defined by some
  configuration) and returns it to be displayed to the user.

getDay()
  This function determines the day that the date selected by randomDate() fell
  on (in order to determine if the user is correct).

terminate()
  This function performs any necessary cleanup before terminating the program
  (closing files, saving anything that can be saved, etc.). Then it quits the
  program.
======================================
Added Function Ideas by Kalpit
======================================

Story
--------
backStory()
  This function displays the bacground story upon startup (ie. as soon as the
  program is executed...NOT before each game is started). The story runs at a
  slow pace (kind of like a powerpoint) with white texts on a black background.
  
  Each section of the story fades in and then fades out making it easier to read
  and more "film-like." At the end of the story credits are given to all individuals
  who participated and helped the production of the game in some way.

printInstructions()
  This function is called by the backStory() function and occurs after the story is displayed.
  It prints the instructions of gameplay - with images of the keyboard (with useful buttons highlighted)
  and samples of the game to see how the game will look. This function can also be called from the main,
  start page. Therefore a button on the start page will also open this directions page.
  (Discuss this with the group).
  
createMap()
  This function creates the main map on which the koala will jump. It includes the following subfunctions:
  1. makeBackground()
        This function makes the background of the entire game..It is a jungle image...but the jungle should
        look artificial - rather than an actual picture.
  2. placeAvatar()
        This function places the avatar at the very bottom of the map.
  3. createTrajectory()
        This function creates the dotted line for the trajectory of the Koala. The trajectory line is linked
        to the koala's nose, so that wherever the koala moves, the trajectory line moves with it.
  4. fillWater()
        This function is called as soon as the Koala makes its first jump. The bottom of the map fills with
        water (blue color) and if the Koala touches the blue, the game immediately ends..ie koala drowns.
  5. makePower()
        This function creates the image for the power meter
  6. setPower()
        This function sets the power of the Koala's jump based on the length of time that the user holds down
        the spacebar.
  7. returnToMainMenu()
        This function with a keyboard press, returns the user to the main menu - in case he wants to load a
        different makefile or can't complete a level.
  8. createSorcerer()
        This function creates the sorcerer at the very top of the map and has him move back and forth on the
        topmost makefile.
  9. placeBlocks()
        This function places the Makefile blocks randomly or in a predefined order on the screen.
  10. stick()
        This function allows the Koala to stick to the blocks if he touches them.
  11. Success()
        This function prints a Success message and then returns the user to the start screen when his Koala hits the g++ sorcerer
  
Customize()
  This function allows the user to choose a Koala avatar and then make it more personal by changing its color

Functions for Getting data out of Makefiles:

name: Makefile::readMakefile
arguments: const char* f (name of file)
return: none
state change:
The  file is opened, and the contents are read into a static
variable string in a Makefile object.  If there are includes
in  the  makefile, these files will also be opened, and read
in literally in place of the include.


name: Makefile::parse
arguments: none
return: none
state change:
This method of the makefile object  is  a  wrapper  function
which  builds  the  various  state  variables  of a Makefile
object.  If it is called before readMakefile, it will  print
a message on stderr and exit.


name: Makefile::buildTargetTree
arguments: none
return: none
state change:
This  function  reads entire makefile string, and identifies
each target.  It builds a target object out of each one that
it  finds,  with  no  connections.  It then reads the string
again to build the dependency  tree,  and  link  the  target
objects.   If  there  is no target object with the name of a
dependency, a file target is built, and linked.


name: Makefile::parseVars
arguments: none
return: none
state change:
The entire  makefile  string  is  read,  and  each  variable
declared in the makefile will be used to instantiate a make-
fileVar object.


name: Makefile::generateLinks
arguments: float scale (between 0 and 1)
return: none
state change:
Linking lines of random lengths are built using the  scaling
value "scale".  These lines will be constructed between tar-
get objects who are linked by dependencies, and they will be
stored in the target objects.


name: constructImage
arguments: Makefile m
return: size of image generated
state change:
The  function  generates a ppm image representing the depen-
dency tree of the Makefile object.


name: constructSkeleton
arguments: Makefile m
return: none
state change:
The function builds a skeleton of hitboxes from the Makefile
object,  and stores the shape, size, and postion of the hit-
boxes in a data file (probably  xml?).   The  hitboxes  will
correspond with the image generated by constructImage.
