<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE spec SYSTEM "http://www.cs.stolaf.edu/lib/SpecML/SpecML.dtd">
<?xml-stylesheet
   href="http://www.cs.stolaf.edu/lib/SpecML/SpecMLToHTML.xsl"
   type="text/xsl"?>

<spec>
<title>The Button Class Specification</title>
<header>This class stores the specifications for an OpenGL button and implements drawing it on the screen.</header>
<credits>Written by Prancing Koala.</credits>

<class name="Button">
<nosuperclass/>

<variables>
<var name="x" type="int">The x position of the upper-left corner of the button, in pixels.</var>
<var name="y" type="int">The y position of the upper-left corner of the button, in pixels.</var>
<var name="width" type="int">The width of the button, in pixels.</var>
<var name="height" type="int">The height of the button, in pixels.</var>
<var name="label" type="string">The label on the button.</var>
<var name="labelStartX" type="int">The position that the label starts on the screen. (Each label needs to start at a different point to be centered, depending on its length.)</var>
<var name="color" type="Color">The color of the button.</var>
</variables>

<constructors-list>
<constructor>
<desc>The constructor.</desc>
<arguments>
<arg name="l" type="string">The label on the button.</arg>
<arg name="xx" type="int">The x position.</arg>
<arg name="yy" type="int">The y position.</arg>
<arg name="w" type="int">The width.</arg>
<arg name="h" type="int">The height.</arg>
<arg name="s" type="enum screenType">The screen that pressing the button will take you to.</arg>
<arg name="p" type="enum screenType">The screen that the button appears on.</arg>
<arg name="lx" type="int">The x-coordinate that the label starts at (placed into labelStartX).</arg>
</arguments>
<statechange>Sets all the values of the button to those described in the constructor, and sets the color to the default button color (a gray).</statechange>
</constructor>
</constructors-list>

<methods-list>
<method name="move" returntype="void">
<desc>This function is empty and virtual in this class, only defined in a subclass.</desc>
<noarguments />
<nostatechange />
<noreturn />
</method>

<method name="drawButton" returntype="void">
<desc>This function draws the button on the screen (but not the label). It uses the state of the Button to determine what color to use, location, and so on. It is called only from the draw() function, which is virtual and overwritten in subclasses. Draw() handles placing the label on the button.</desc>
<noarguments />
<nostatechange />
<noreturn />
</method>

<method name="draw" returntype="void">
<desc>This function runs the drawButton() function, then additionally adds the label to the button.</desc>
<noarguments />
<nostatechange />
<noreturn />
</method>

<method name="onButton" returntype="bool">
<desc>This function, given the coordinates of the mouse pointer at the moment, determines whether the mouse pointer is over this button.</desc>
<arguments>
<arg name="xmousepos" type="int">The x coordinate of the mouse location.</arg>
<arg name="ymousepos" type="int">The y coordinate of the mouse location.</arg>
</arguments>
<nostatechange />
<return>True if the pointer is within the bounds of the button; False otherwise.</return>
</method>

</methods-list>
</class>

<class name="MovingButton">
<superclass name="Button"></superclass>

<novariables />

<constructors-list>
<constructor>
<desc>The constructor.</desc>
<arguments>
<arg name="l" type="string">The label on the button.</arg>
<arg name="xx" type="int">The x position.</arg>
<arg name="yy" type="int">The y position.</arg>
<arg name="w" type="int">The width.</arg>
<arg name="h" type="int">The height.</arg>
<arg name="s" type="enum screenType">The screen that pressing the button will take you to.</arg>
<arg name="p" type="enum screenType">The screen that the button appears on.</arg>
<arg name="lx" type="int">The x-coordinate that the label starts at (placed into labelStartX).</arg>
</arguments>
<statechange>Runs the superclass constructor.</statechange>
</constructor>
</constructors-list>

<methods-list>

<method name="move" returntype="void">
<desc>This function moves the quit button down and left 4 pixels at a time until it goes off the screen in either the x or y direction, when it resets it to the other location. It should be called every time the screen is redrawn after the MovingButton has been pressed once.</desc>
<noarguments />
<nostatechange />
<noreturn />
</method>

<method name="draw" returntype="void">
<desc>This function runs the drawButton() function, then additionally adds the label to the button. It's different from the superclass's draw() because it needs to account for the fact that the label needs to move when the button move()s.</desc>
<noarguments />
<nostatechange />
<noreturn />
</method>

</methods-list>
</class>

</spec>
